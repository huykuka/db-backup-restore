name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test-frontend:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          npm ci --verbose --network-timeout 300000
          npm install @tailwindcss/postcss --save-dev
        working-directory: frontend

      - name: Run linter & tests in parallel
        run: |
          npm run lint & \
          npm test & \
          wait
        working-directory: frontend

  test-backend:
    runs-on: self-hosted
    needs: lint-and-test-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Install dependencies
        run: go mod download
        working-directory: backend

      - name: Run backend tests
        run: go test ./...
        working-directory: backend

  build-frontend:
    runs-on: self-hosted
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: lint-and-test-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install frontend dependencies
        run: npm install --verbose
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  build-backend:
    runs-on: self-hosted
    needs: [build-frontend, test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    container:
      image: node:20-bullseye # Use a Node.js image that supports Go installation
    steps:
      # Install Go
      - name: Install Go
        run: |
          apt-get update && apt-get install -y golang-go
          go version  # Verify Go installation

      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: source

      # Download frontend build artifacts
      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: source/frontend/dist

      # Install backend dependencies
      - name: Install backend dependencies
        run: go mod download
        working-directory: source/backend

      # List files in the frontend build directory
      - name: List files in frontend build
        run: ls -la source/frontend/dist/frontend

      # Copy frontend build to the backend directory
      - name: Copy frontend build to backend
        run: cp -r source/frontend/dist/frontend/* source/backend/internal/routes/web

      # Build the backend and ensure the binary has executable permissions
      - name: Build backend
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o output/main ./cmd/db-tool/main.go
          chmod +x output/main    # Set executable permissions
        working-directory: source/backend

      # Upload the backend binary artifact
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: source/backend/output

  build-docker:
    runs-on: self-hosted
    needs: build-backend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download backend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend/output

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.build
          push: true
          tags: 010497/db-tools:latest
          cache-from: type=registry,ref=010497/db-tools:latest
          cache-to: type=inline
